{"hash":"c77185589ad31258d1c6e4e78ed547fd55cb60fb","fesm2022":[{"exports":["NgxSSM","NgxSsmModule"],"facadeModuleId":"/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/ngx-simple-state-manager.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/lib/ngx-ssm.service.mjs","/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/lib/ngx-ssm.module.mjs","/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/public-api.mjs","/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/ngx-simple-state-manager.mjs"],"name":"ngx-simple-state-manager","type":"chunk","dynamicImports":[],"fileName":"ngx-simple-state-manager.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable","NgModule"],"deep-object-diff":["updatedDiff"],"deepmerge-ts":["deepmerge"],"rxjs":["Subject"]},"imports":["@angular/core","deep-object-diff","deepmerge-ts","rxjs"],"modules":{"/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/lib/ngx-ssm.service.mjs":{"code":"//@ts-nocheck\nclass NgxSSM {\n    appState = {};\n    stateObserver$ = new Subject();\n    registerComponent(instance, initialState) {\n        const name = this.getName(instance);\n        const uuid = self.crypto.randomUUID();\n        instance.__esm_uuid = uuid;\n        let id = uuid;\n        if (this.appState[id] && this.appState[id].comp === instance) {\n            throw Error('already registered');\n        }\n        this.appState[id] =\n            {\n                id: id,\n                name: name,\n                state: initialState,\n                comp: instance\n            };\n    }\n    setState(instance, newState) {\n        const id = this.getId(instance);\n        const name = this.getName(instance);\n        const currentEntry = this.appState[id];\n        if (!currentEntry && currentEntry.comp !== instance) {\n            throw Error('no instance');\n        }\n        const before = Object.assign({}, this.appState[id].state);\n        const result = deepmerge(this.appState[id].state, newState);\n        this.appState[id].state = result;\n        const diff = updatedDiff(before, result);\n        this.stateObserver$.next({\n            component: instance,\n            name: name,\n            id: id,\n            oldState: before,\n            newState: result,\n            diff: diff\n        });\n    }\n    getState(instance) {\n        const name = instance.__esm_uuid;\n        return this.appState[name].state;\n    }\n    getAppState() {\n        return this.appState;\n    }\n    getId(comp) {\n        return comp.__esm_uuid;\n    }\n    getName(comp) {\n        return comp.name;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSSM, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSSM });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSSM, decorators: [{\n            type: Injectable\n        }] });","originalLength":7778,"removedExports":[],"renderedExports":["NgxSSM"],"renderedLength":2037},"/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/lib/ngx-ssm.module.mjs":{"code":"class NgxSsmModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSsmModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSsmModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSsmModule, providers: [NgxSSM] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSsmModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [NgxSSM]\n                }]\n        }] });","originalLength":1660,"removedExports":[],"renderedExports":["NgxSsmModule"],"renderedLength":695},"/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/public-api.mjs":{"code":"/*\n * Public API Surface of ngx-simple-state-manager\n */","originalLength":680,"removedExports":[],"renderedExports":[],"renderedLength":56},"/Users/nikola/Documents/projects/ngx-easy-state-manager/dist/ngx-simple-state-manager/esm2022/ngx-simple-state-manager.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":552,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { updatedDiff } from 'deep-object-diff';\nimport { deepmerge } from 'deepmerge-ts';\nimport { Subject } from 'rxjs';\n\n//@ts-nocheck\nclass NgxSSM {\n    appState = {};\n    stateObserver$ = new Subject();\n    registerComponent(instance, initialState) {\n        const name = this.getName(instance);\n        const uuid = self.crypto.randomUUID();\n        instance.__esm_uuid = uuid;\n        let id = uuid;\n        if (this.appState[id] && this.appState[id].comp === instance) {\n            throw Error('already registered');\n        }\n        this.appState[id] =\n            {\n                id: id,\n                name: name,\n                state: initialState,\n                comp: instance\n            };\n    }\n    setState(instance, newState) {\n        const id = this.getId(instance);\n        const name = this.getName(instance);\n        const currentEntry = this.appState[id];\n        if (!currentEntry && currentEntry.comp !== instance) {\n            throw Error('no instance');\n        }\n        const before = Object.assign({}, this.appState[id].state);\n        const result = deepmerge(this.appState[id].state, newState);\n        this.appState[id].state = result;\n        const diff = updatedDiff(before, result);\n        this.stateObserver$.next({\n            component: instance,\n            name: name,\n            id: id,\n            oldState: before,\n            newState: result,\n            diff: diff\n        });\n    }\n    getState(instance) {\n        const name = instance.__esm_uuid;\n        return this.appState[name].state;\n    }\n    getAppState() {\n        return this.appState;\n    }\n    getId(comp) {\n        return comp.__esm_uuid;\n    }\n    getName(comp) {\n        return comp.name;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSSM, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSSM });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSSM, decorators: [{\n            type: Injectable\n        }] });\n\nclass NgxSsmModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSsmModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSsmModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSsmModule, providers: [NgxSSM] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.4\", ngImport: i0, type: NgxSsmModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [NgxSSM]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-simple-state-manager\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxSSM, NgxSsmModule };\n//# sourceMappingURL=ngx-simple-state-manager.mjs.map\n","map":null,"preliminaryFileName":"ngx-simple-state-manager.mjs","sourcemapFileName":"ngx-simple-state-manager.mjs.map"},{"fileName":"ngx-simple-state-manager.mjs.map","needsCodeReference":false,"originalFileName":null,"source":"{\"version\":3,\"file\":\"ngx-simple-state-manager.mjs\",\"sources\":[\"../../../projects/ngx-simple-state-manager/src/lib/ngx-ssm.service.ts\",\"../../../projects/ngx-simple-state-manager/src/lib/ngx-ssm.module.ts\",\"../../../projects/ngx-simple-state-manager/src/public-api.ts\",\"../../../projects/ngx-simple-state-manager/src/ngx-simple-state-manager.ts\"],\"sourcesContent\":[\"//@ts-nocheck\\nimport { Injectable }  from \\\"@angular/core\\\";\\nimport { updatedDiff } from \\\"deep-object-diff\\\";\\nimport { deepmerge }   from \\\"deepmerge-ts\\\";\\nimport { Subject }     from \\\"rxjs\\\";\\n\\ntype DeepPartial<T> = {\\n\\t[P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\\n};\\n\\n@Injectable()\\nexport class NgxSSM {\\n\\tappState       = {}\\n\\tstateObserver$ = new Subject()\\n\\t\\n\\tregisterComponent<T>( instance: any, initialState: T ): void {\\n\\t\\tconst name          = this.getName( instance );\\n\\t\\tconst uuid          = self.crypto.randomUUID();\\n\\t\\tinstance.__esm_uuid = uuid;\\n\\t\\tlet id              = uuid\\n\\t\\tif ( this.appState[id] && this.appState[id].comp === instance ) {\\n\\t\\t\\tthrow Error( 'already registered' )\\n\\t\\t}\\n\\t\\tthis.appState[id] =\\n\\t\\t\\t{\\n\\t\\t\\t\\tid:    id,\\n\\t\\t\\t\\tname:  name,\\n\\t\\t\\t\\tstate: initialState,\\n\\t\\t\\t\\tcomp:  instance\\n\\t\\t\\t}\\n\\t}\\n\\t\\n\\tsetState<T>( instance, newState: DeepPartial<T> ) {\\n\\t\\tconst id           = this.getId( instance );\\n\\t\\tconst name         = this.getName( instance );\\n\\t\\tconst currentEntry = this.appState[id];\\n\\t\\tif ( !currentEntry && currentEntry.comp !== instance ) {\\n\\t\\t\\tthrow Error( 'no instance' )\\n\\t\\t}\\n\\t\\tconst before            = Object.assign( {}, this.appState[id].state );\\n\\t\\tconst result            = deepmerge( this.appState[id].state as T, newState as T )\\n\\t\\tthis.appState[id].state = result;\\n\\t\\tconst diff              = updatedDiff( before, result );\\n\\t\\tthis.stateObserver$.next( {\\n\\t\\t\\tcomponent: instance,\\n\\t\\t\\tname:      name,\\n\\t\\t\\tid:        id,\\n\\t\\t\\toldState:  before,\\n\\t\\t\\tnewState:  result,\\n\\t\\t\\tdiff:      diff\\n\\t\\t} )\\n\\t\\t\\n\\t}\\n\\t\\n\\tgetState( instance: object ) {\\n\\t\\tconst name = instance.__esm_uuid;\\n\\t\\treturn this.appState[name].state;\\n\\t}\\n\\t\\n\\tgetAppState() {\\n\\t\\treturn this.appState\\n\\t}\\n\\t\\n\\tprivate getId( comp ) {\\n\\t\\treturn comp.__esm_uuid\\n\\t}\\n\\t\\n\\tprivate getName( comp ) {\\n\\t\\treturn comp.name;\\n\\t}\\n\\t\\n\\t\\n}\\n\",\"import { NgModule } from \\\"@angular/core\\\";\\nimport { NgxSSM }   from \\\"./ngx-ssm.service\\\";\\n\\n@NgModule( {\\n\\tproviders: [ NgxSSM ]\\n} )\\nexport class NgxSsmModule {\\n}\\n\",\"/*\\n * Public API Surface of ngx-simple-state-manager\\n */\\n\\nexport * from './lib/ngx-ssm.service';\\nexport * from './lib/ngx-ssm.module';\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[],\"mappings\":\"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\"}","type":"asset"}]}